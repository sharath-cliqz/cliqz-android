#!/bin/env groovy
@Library('cliqz-shared-library@v1.2') _
def matrix = [
        'cliqz':[
                'config':'mozconfigs/cliqz.mozconfig',
        ],
]
def baseImage
def codeImage
def id
node ('master'){
    def dockerTag = "" 
    stage('Checkout') {
        checkout scm
        dockerTag = readFile('mozilla-release/browser/config/version_display.txt').trim()
    }
    id = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
    baseImageName ="browser-f/android:${dockerTag}"
}

def build(Map m){
    def flavor = m.config
    def flavorname = m.name
    def getImageName = m.getImageName
    def nodeLabel = 'master'
    def getId = m.getId
    def apk = ""
    return {
        node(nodeLabel){
            getImageName().inside() {
                apk = "asd.apk"
            }
            stage('Upload') {
                // Pass
            }
            stage('Clean Up') {
                // Pass
            }
        }
    }
}

def stepsForParallelBuilds = helpers.entries(matrix).collectEntries{
    [("Building ${it[0]}"):build(
            name: it[0],
            config:it[1]['config'],
            getImageName: {codeImage},
            getId: {id}
    )]
}

stage('Build Applications'){
    parallel stepsForParallelBuilds
}

def transitionIssueList
stage('JIRA'){
    withEnv(['JIRA_SITE=cliqztix']){
        passedBuilds = []
        lastSuccessfulBuild(passedBuilds,currentBuild)
        def issueIds = getIssueList()
    }
}
def changes = getChangeString(passedBuilds)
stage('Send email') {
    def projectName  = '$PROJECT_NAME'
    def changesSinceLastSuccess = changes
    def bodytxt = """
        ${projectName} - Build # ${env.BUILD_NUMBER}
        Check console output at ${env.JOB_URL}${env.BUILD_NUMBER}/ to view the results.
        Cliqz apk Uploaded to: http://repository.cliqz.com.s3.amazonaws.com/dist/android/nightly/cliqz/latest.apk
        Cliqz-Alpha apk Uploaded to: http://repository.cliqz.com.s3.amazonaws.com/dist/android/nightly/cliqz-alpha/latest.apk
        Ghostery apk Uploaded to: http://repository.cliqz.com.s3.amazonaws.com/dist/android/nightly/ghostery/latest.apk
        Ghostery-Alpha apk Uploaded to: http://repository.cliqz.com.s3.amazonaws.com/dist/android/nightly/ghostery-alpha/latest.apk
        ${changesSinceLastSuccess}
        Issues Transtioned ${transitionIssueList}""".stripIndent()
    emailext(
        to: 'sharath@cliqz.com',
        subject: '$PROJECT_NAME - Build # $BUILD_NUMBER',
        body: bodytxt
    )
}


def lastSuccessfulBuild(passedBuilds, build) {
    if ((build != null) && (build.result != 'SUCCESS')) {
        echo "Finding last succesful build"
        passedBuilds.add(build)
        echo "Found a build"
        lastSuccessfulBuild(passedBuilds, build.getPreviousBuild())
    }
}

@NonCPS
def getChangeString(passedBuilds) {
    def changeString = ""
    echo "Gathering Changes Since Last Successful Build"
    for (int x = 0; x < passedBuilds.size(); x++) {
        def currentBuild = passedBuilds[x];
        def buildNumber = currentBuild.number
        echo "Changes for Build ${buildNumber}"
        def changeLogSets = currentBuild.rawBuild.changeSets
        for (int i = 0; i < changeLogSets.size(); i++) {
            def entries = changeLogSets[i].items
            for (int j = 0; j < entries.length; j++) {
                def entry = entries[j]
                changeString += "* ${entry.msg}\n"
            }
        }
    }
    echo changeString
    return changeString;
}

@NonCPS
def getIssueList(){
    def list = []
    def re = /AB2-([0-9])*/
    def y = changes =~ re
    while (y){
        list.add(y.group().toString())
    }
    if (list.size() > 0) {
        echo 'Detected JIRA tickets'
        echo list.toString()
    } else {
       echo 'No JIRA tickets detected'
    }
    return list
}