#!/bin/env groovy
@Library('cliqz-shared-library@v1.2') _

def matrix = [
        'x86':[
            'target':'i686-linux-android',
        ],
    ]
node('us-east-1 && ubuntu && docker && !gpu') {
    def dockerTag = ""
    def apk = ""
    try {
        stage('Checkout') {
            checkout scm
            dockerTag = readFile('mozilla-release/browser/config/version_display.txt').trim()
        }
        def baseImageName = "browser-f/android:${dockerTag}"
        docker.withRegistry('https://141047255820.dkr.ecr.us-east-1.amazonaws.com') {
            docker.image("${baseImageName}").inside {
                stage('Download cache') {
                    withCredentials([[
                            $class: 'AmazonWebServicesCredentialsBinding',
                            accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                            credentialsId: 'd7e38c4a-37eb-490b-b4da-2f53cc14ab1b',
                            secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                        def s3Path = "s3://repository.cliqz.com/dist/android/cache"
                        def cachePath = ".gradle/caches"
                        sh """#!/bin/bash -l
                            pip install awscli --upgrade --user
                            cd
                            aws s3 cp --acl public-read --acl bucket-owner-full-control ${s3Path} ${cachePath} --recursive
                        """
                    }
                }
                stage('Build Artifacts') {
                    withEnv(["ANDROID_TARGET=i686-linux-android"]) {
                        sh '''#!/bin/bash -l
                            set -e
                            set -x
                            cp mozconfigs/artifact.mozconfig mozilla-release/mozconfig
                            cd mozilla-release
                            ./mach clobber
                            ./mach -v build
                            ./mach -v package
                        '''
                    }
                }
                stage('Upload'){
                    apk = sh(returnStdout: true, 
                        script: """cd mozilla-release/objdir-frontend-android/ghostery/dist && \
                        find *.apk -name 'target*' -not -name '*-unsigned-*'""").trim()
                    sh "cp mozilla-release/objdir-frontend-android/ghostery/dist/${apk} target.apk"
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'target.apk'
                }
            }
        }
    }
    finally {
        stage('Clean Up') {
            sh '''#!/bin/bash
                rm -f target.apk
                rm -f mozilla-release/mozconfig
                rm -rf mozilla-release/objdir-frontend-android
            '''
        }
    }
}